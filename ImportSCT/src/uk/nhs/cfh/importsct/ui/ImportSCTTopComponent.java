/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.nhs.cfh.importsct.ui;

import org.netbeans.api.settings.ConvertAsProperties;
import java.io.File;
import javax.swing.JFileChooser;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import uk.nhs.cfh.importsct.ImportSCT;
import org.openide.filesystems.FileObject;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//uk.nhs.cfh.importsct.ui//ImportSCT//EN", autostore = false)
@TopComponent.Description(preferredID = "ImportSCTTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uk.nhs.cfh.importsct.ui.ImportSCTTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ImportSCTAction",
preferredID = "ImportSCTTopComponent")
@Messages({
    "CTL_ImportSCTAction=ImportSCT",
    "CTL_ImportSCTTopComponent=Import SNOMED CT",
    "HINT_ImportSCTTopComponent=Importing SNOMED CT data files window"
})
public final class ImportSCTTopComponent extends TopComponent {

    ImportSCT importsct = Lookup.getDefault().lookup(ImportSCT.class);
    InputOutput io = IOProvider.getDefault().getIO("Import Status", false);
    File home = new File(System.getProperty("user.home"));
    String conceptPathINT;
    String relPathINT;
    String conceptPathUK;
    String relPathUK;
    
    
    public ImportSCTTopComponent() {
        initComponents();
        setName(Bundle.CTL_ImportSCTTopComponent());
        setToolTipText(Bundle.HINT_ImportSCTTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel4.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jTextField2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel5.text")); // NOI18N

        jTextField3.setText(org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jTextField3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel6.text")); // NOI18N

        jTextField4.setText(org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jTextField4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton7, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton7.text")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton8, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton8.text")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jLabel7.text")); // NOI18N

        jTextField5.setText(org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jTextField5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton9, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton9.text")); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton10, org.openide.util.NbBundle.getMessage(ImportSCTTopComponent.class, "ImportSCTTopComponent.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4))
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton10))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ImportSCT importsct = Lookup.getDefault().lookup(ImportSCT.class);
        String foldername = jTextField1.getText();
        FileChooserBuilder fcbuilder = new FileChooserBuilder("release-dir").setTitle("Select the folder which contains both latest INT and UK release text file").setDefaultWorkingDirectory(home);
        JFileChooser chooser = fcbuilder.createFileChooser();
//        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(this);
        switch(result){
            case JFileChooser.APPROVE_OPTION:
                File selectedFolder = chooser.getSelectedFile();
                FileObject folder = FileUtil.toFileObject(selectedFolder);
                importsct.releaseFiles(folder);
                jTextField1.setText(selectedFolder.getAbsolutePath());
                io.select();
                io.getOut().println("Selected folder for release data files: ");
                io.getOut().println(jTextField1.getText());
                io.getOut().close();
//                String release = selectedFolder.getName();
//                importsct.releaseVersion(release);
                if(isFolderContainReleaseFiles()==false){
                   NotifyDescriptor nb = new NotifyDescriptor.Message("No file in folder, please select another folder. Or try the option two "); 
                   DialogDisplayer.getDefault().notify(nb);
                // stop import and select a new folder
                io.getErr().println("No file in folder");
                io.getOut().println("Stop import and select a new folder");
                io.getOut().close();
              
                }

                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;                
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean isFolderContainReleaseFiles() {
       conceptPathINT = importsct.getConceptPathINT();

       if(conceptPathINT==null){
       //please select a folder
           return false;
       }
       else{
         
        io.getOut().println("Found INT concept file: ");
        io.getOut().println(conceptPathINT);
        io.getOut().close();
        
        relPathINT = importsct.getRelPathINT();
        io.getOut().println("Found INT Relationship file: ");
        io.getOut().println(relPathINT);
        io.getOut().close();
        
        conceptPathUK = importsct.getConceptPathUK();
        io.getOut().println("Found UK concept file: ");
        io.getOut().println(conceptPathUK);
        io.getOut().close();        
        
        relPathUK = importsct.getRelPathUK();
        io.getOut().println("Found UK Relationship file: ");
        io.getOut().println(relPathUK);
        io.getOut().close(); 
        
        
       return true;
       }
}
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
        io.select();
        io.getOut().println("Start import SNOMED CT data files ...... ");
        io.getOut().close();
        
        Runnable importRunnable = new Runnable(){
        public void run() {
        ProgressHandle p = ProgressHandleFactory.createHandle("Import SNOMED Task");        
        p.start(100);
        p.progress("Start importing ", 2);        
        importINTConcept();
        p.progress("Import INT concepts", 20);
        importINTRel();     
        p.progress("Import INT relationships", 60);
        importUKConcept();    
        p.progress("Import UK concepts", 70); 
        importUKRel();    
        p.progress("Import UK relationships", 80); 
        importISAtoInactiveConcepts();  
        p.progress("Assign inactive relationships", 90);  
        importISAforInactiveConcepts();      
        p.progress(100);
        p.finish();
//        io.getOut().println("Import SNOMED CT completed.");
        io.getOut().close();
           }
        }; 
        Thread mythread = new Thread(importRunnable);
        mythread.start();        
        }catch(NullPointerException e){
            NotifyDescriptor nd = new NotifyDescriptor.Message("The folder might not contain the release data files." + "\n" + "Please try option 2 to specify the data files.");
            DialogDisplayer.getDefault().notify(nd);
}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String fn = jTextField2.getText();
        //default dir to use if no value is stored

        FileChooserBuilder fcbuilder = new FileChooserBuilder("release-dir").setTitle("Select INT Concept text file").setDefaultWorkingDirectory(home);
        JFileChooser chooser = fcbuilder.createFileChooser();
        //JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showOpenDialog(this);
        switch (result){
            case JFileChooser.APPROVE_OPTION:
                fn = chooser.getSelectedFile().getAbsolutePath();
                jTextField2.setText(fn);
                io.select();
                io.getOut().println("Selected INT Release Concept data file :");
                io.getOut().println(jTextField2.getText());
                io.getOut().close();
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        io.getOut().println("Start to import INT Concepts ...");
        io.getOut().close();
        importsct.createGraphDB();
        Runnable importConINTrun = new Runnable(){
            public void run(){
            ProgressHandle handle = ProgressHandleFactory.createHandle("Import INT Concepts task ");
            handle.start();
            handle.switchToIndeterminate();
            importsct.importConcepts(jTextField2.getText());
            handle.finish();
            }
        };
        Thread myThread = new Thread(importConINTrun);
        myThread.start();             
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String fn = jTextField3.getText();
        FileChooserBuilder fcbuilder = new FileChooserBuilder("release-dir").setTitle("Select INT Relationship text file").setDefaultWorkingDirectory(home);
        JFileChooser chooser = fcbuilder.createFileChooser();
        //      JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showOpenDialog(this);
        switch (result){
            case JFileChooser.APPROVE_OPTION:
                fn = chooser.getSelectedFile().getAbsolutePath();
                jTextField3.setText(fn);
                io.getOut().println("Selected INT Release Relationship data file :");
                io.getOut().println(jTextField3.getText());
                io.getOut().close();
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        }    
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    
        io.getOut().println("Start to import INT Relationships ...");
        io.getOut().close();
        importsct.startGraphDB();
        Runnable importConINTrun = new Runnable(){
            public void run(){
            ProgressHandle handle = ProgressHandleFactory.createHandle("Import INT Relationships task ");
            handle.start();
            handle.switchToIndeterminate();
            importsct.importRelationships(jTextField3.getText());
            handle.finish();
            }
        };
        Thread myThread = new Thread(importConINTrun);
        myThread.start();  
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String fn = jTextField4.getText();
        FileChooserBuilder fcbuilder = new FileChooserBuilder("release-dir").setTitle("Select UK Concept text file").setDefaultWorkingDirectory(home);
        JFileChooser chooser = fcbuilder.createFileChooser();
        //        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showOpenDialog(this);
        switch (result){
            case JFileChooser.APPROVE_OPTION:
                fn = chooser.getSelectedFile().getAbsolutePath();
                jTextField4.setText(fn);
                io.select();
                io.getOut().println("Selected UKTC Extension Concept data file :");
                io.getOut().println(jTextField4.getText());
                io.getOut().close();
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        io.getOut().println("Start to import UKTC Extension Concepts ...");
        io.getOut().close();
        importsct.startGraphDB();
        Runnable importConINTrun = new Runnable(){           
            public void run(){
            ProgressHandle handle = ProgressHandleFactory.createHandle("Import UKTC Concepts task ");
            handle.start();
            handle.switchToIndeterminate();
            importsct.importConcepts(jTextField4.getText());
            handle.finish();
            }
        };
        Thread myThread = new Thread(importConINTrun);
        myThread.start();  
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String fn = jTextField5.getText();
        FileChooserBuilder fcbuilder = new FileChooserBuilder("release-dir").setTitle("Select UK Relationship text file").setDefaultWorkingDirectory(home);
        JFileChooser chooser = fcbuilder.createFileChooser();
//        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showOpenDialog(this);
        switch (result){
            case JFileChooser.APPROVE_OPTION:
                fn = chooser.getSelectedFile().getAbsolutePath();
                jTextField5.setText(fn);
                io.getOut().println("Selected UKTC Extension Relationship data file :");
                io.getOut().println(jTextField5.getText());
                io.getOut().close();
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        } 
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        io.getOut().println("Start to import UKTC Extension Relationships ...");
        io.getOut().close();
        importsct.startGraphDB();
        Runnable importConINTrun = new Runnable(){
            public void run(){
            ProgressHandle handle = ProgressHandleFactory.createHandle("Import UKTC Extention Relationships task ");
            handle.start();
            handle.switchToIndeterminate();
            importsct.importRelationships(jTextField5.getText());
            importISAtoInactiveConcepts();   
            importISAforInactiveConcepts();      
            handle.finish();
            }
        };
        Thread myThread = new Thread(importConINTrun);
        myThread.start();
    }//GEN-LAST:event_jButton10ActionPerformed

    
    private void importINTConcept(){
//        importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.createGraphDB();
        importsct.importConcepts(conceptPathINT);
        }catch(NullPointerException e){
//            NotifyDescriptor nb = new NotifyDescriptor.Message("No INT concept release data file in this folder.");
            NotifyDescriptor nb = new NotifyDescriptor.Confirmation("No file in folder", NotifyDescriptor.OK_CANCEL_OPTION);
            if(DialogDisplayer.getDefault().notify(nb)==NotifyDescriptor.CANCEL_OPTION){
                
                // stop import and select a new folder
                io.getErr().println("No file in folder");
                io.getOut().println("Stop import and select a new folder");
                io.getOut().close();
            };
                   
            
            
        }
    }
    
    private void importINTRel(){
        //      import INT relationship table 
//        importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.startGraphDB();
        importsct.importRelationships(relPathINT);
        }catch (NullPointerException e){
            NotifyDescriptor nb = new NotifyDescriptor.Message("No INT relationship data file in this folder.");
            DialogDisplayer.getDefault().notify(nb);
        }
    }
    
    private void importUKConcept(){
        //      import UK concept table
//        importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.startGraphDB();
        importsct.importConcepts(conceptPathUK); 
        }catch(NullPointerException e){
            NotifyDescriptor nb = new NotifyDescriptor.Message("No UK concept data file in this folder.");
            DialogDisplayer.getDefault().notify(nb);
        }
    }
    
    private void importUKRel(){
//        importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.startGraphDB();       
        importsct.importRelationships(relPathUK);
        }catch(NullPointerException e){
            NotifyDescriptor nb = new NotifyDescriptor.Message("No UK relationship data file in this folder.");
            DialogDisplayer.getDefault().notify(nb);
        }
    }
    
    private void importISAtoInactiveConcepts(){
//        ImportSCT importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.startGraphDB();
        importsct.assignCurrentISAtoInactiveConcepts();
        }catch(NullPointerException e){
            NotifyDescriptor nb = new NotifyDescriptor.Message("Errors in the imported release tables.");
            DialogDisplayer.getDefault().notify(nb);
        }

    }
    
    private void importISAforInactiveConcepts(){
//        ImportSCT importsct = Lookup.getDefault().lookup(ImportSCT.class);
        try{
        importsct.startGraphDB();
        importsct.assigniISAtoInactiveConcepts();
        }catch(NullPointerException e){
            NotifyDescriptor nb = new NotifyDescriptor.Message("Errors in the imported release tables.");
            DialogDisplayer.getDefault().notify(nb);
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
